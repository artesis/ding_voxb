<?php
/**
 * @file
 *
 */

// Define reviews per page
define('VOXB_DEFAULT_REVIEWS_PER_PAGE', 3);
// Define path to Voxb module
define('VOXB_PATH', drupal_get_path('module', 'ding_voxb'));

/**
 * Implements hook_init().
 */
function ding_voxb_init() {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
}

/**
 * Implements hook_menu().
 */
function ding_voxb_menu() {
  $items = array();

  $items['admin/config/ding/voxb'] = array(
    'title' => 'VoxB',
    'description' => 'VoxB module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_voxb_admin'),
    'access arguments' => array('administer voxb'),
    'file' => 'ding_voxb.admin.inc'
  );

  $items['voxb/ajax/reviews/%/page/%'] = array(
    'title' => 'VoxB pagination handler',
    'description' => '',
    'page arguments' => array(1, 3, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_paginator',
  );

  $items['voxb/ajax/rating/%/%'] = array(
    'title' => 'VoxB rating handler',
    'description' => '',
    'page arguments' => array(1, 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_rating',
  );

  $items['voxb/ajax/details'] = array(
    'title' => 'VoxB ting objects details handler',
    'description' => '',
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_details',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_voxb_permission() {
  return array(
    'administer voxb' => array(
      'title' => t('Administer voxb settings'),
    ),
  );
}

/**
 * Implements hook_user_login().
 *
 * Invokes methos to select user information from Voxb
 */
function ding_voxb_user_login($edit, $account) {
  $obj = new VoxbLogin();
  $obj->login($account);
}

/**
 * Handle the pagination page click, update reviews & pagination labels
 *
 * @param $type
 *   Type of the request, e.g. ajax or else
 * @param $faust_number
 *   Item ID
 * @param $page
 *   Clicked page number
 */
function ding_voxb_paginator($type = 'ajax', $faust_number = '', $page = 1) {
  // In case we have an ajax call
  if ($type == 'ajax') {
    if ($faust_number != '') {
      // Calculate the reviews array fetch limits
      $per_page = variable_get('voxb_reviews_per_page', VOXB_DEFAULT_REVIEWS_PER_PAGE);
      $start = ($page - 1) * $per_page;
      $end = $start + $per_page;

      // Get the reviews
      $item = new VoxbItem();
      $item->addReviewHandler('review', new VoxbReviews());
      $item->fetchByFaust($faust_number);
      $reviews = $item->getReviews('review')->toArray();

      // Remove the reviews
      $commands[] = ajax_command_html('.user-reviews', '');

      // Place the reviews
      for ($i = $start; $i < $end; $i++) {
        if (isset($reviews[$i]['text'])) {
          $commands[] = ajax_command_append('.user-reviews', theme(
            'voxb_review_record',
            array(
              'author' => $reviews[$i]['authorName'],
              'review' => $reviews[$i]['text'])));
        }
      }

      $page_to_set = 1;
      // Update the pagination 'previous' link
      if ($page > 1) {
        $page_to_set = $page - 1;
      }

      $commands[] = ajax_command_html(
        '.prev-page',
        l(
          '<<',
          'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_to_set . '',
          array('attributes' => array('class' => array('use-ajax')))));

      $pages_total = ceil(count($reviews) / $per_page);
      $page_to_set = $pages_total;

      // Update the pagination 'next' link
      if ($page < $pages_total) {
        $page_to_set = $page + 1;
      }

      $commands[] = ajax_command_html(
        '.next-page',
        l(
          '>>',
          'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_to_set . '',
          array('attributes' => array('class' => array('use-ajax')))));

      // Update the pagination 'numbered' links
      for ($i = $page - 1, $k = 0; $k < 5; $i++, $k++) {
        $page_link = $i - 1;

        // Check the link index bounds, recreate if true, remove if otherwise
        if ($page_link > 0 && $page_link <= $pages_total) {
          $commands[] = ajax_command_html(
            '.page-num:eq(' . $k . ')',
            l(
              $page_link,
              'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_link . '',
              array('attributes' => array('class' => array('use-ajax')))));
        }
        else {
          $commands[] = ajax_command_html('.page-num:eq(' . $k . ')', '');
        }
      }

      $result = array('#type' => 'ajax', '#commands' => $commands);

      // Show the changes
      ajax_deliver($result);
    }
  }
}

/**
 * Implements hook_theme().
 */
function ding_voxb_theme() {
  $hooks['voxb_tag_record'] = array(
    'variables' => array('tag_name' => NULL),
    'template' => 'templates/ding_voxb-tag-record',
  );

  $hooks['voxb_review_record'] = array(
    'variables' => array('author' => NULL, 'review' => NULL),
    'template' => 'templates/ding_voxb-review-record',
  );

  $hooks['voxb_rating'] = array(
    'variables' => array(
        'voxb_item' => NULL,
        'object_id' => NULL),
    'template' => 'templates/ding_voxb-rating'
  );

  $hooks['voxb_rating_display_only'] = array(
    'variables' => array('object_id' => NULL, 'object_local_id' => NULL),
    'template' => 'templates/ding_voxb-rating-display_only'
  );

  $hooks['voxb_tags'] = array(
    'variables' => array(
        'voxb_item' => NULL,
        'object_id' => NULL),
    'template' => 'templates/ding_voxb-tags'
  );

  $hooks['voxb_review'] = array(
    'variables' => array(
        'voxb_item' => NULL,
        'object_id' => NULL),
    'template' => 'templates/ding_voxb-review'
  );

  $hooks['voxb_review_count'] = array(
    'variables' => array(
        'voxb_item' => NULL,
        'object_id' => NULL),
    'template' => 'templates/ding_voxb-review-count'
  );

  $hooks['voxb_search_result'] = array(
    'variables' => NULL,
    'template' => 'templates/ding_voxb-search-result'
  );

  return $hooks;
}

/**
 * Implements MODULE_preprocess_THEME().
 */
function ding_voxb_preprocess_voxb_rating(&$variables) {
  $voxb_item = $variables['voxb_item'];
  $oid = $variables['object_id'];
  $profile = unserialize($_SESSION['voxb']['profile']);

  // Rating section
  $ratings = '';
  $rating = (int)$voxb_item->getRating() / 20;

  $ratings .= '<div class="add-rating-container">';
  $ratings .= '<div' . ($profile && $profile->isAbleToRate($oid) ? ' class="user-rate"' : '') . '>';

  // Add 'stars'
  for ($i = 1; $i <= 5; $i++) {
    $ratings .= '<div href="/voxb/ajax/rating/' . $oid . "/" . $i . '" class="' . ($profile && $profile->isAbleToRate($oid) ? 'use-ajax' : '') . ' rating' . ($i <= $rating ? ' star-on' : ' star-off') . '"></div>';
  }

  $ratings .= '</div></div>';
  $ratings .= '<span class="rating-count-span">(<span class="rating-votes-number">' . (($voxb_item->getRatingCount() > 0) ? $voxb_item->getRatingCount() : 0) . '</span>)</span>';
  $ratings .= '<div class="ajax-anim">&nbsp;</div><div class="clearfix"></div>';

  $variables['ratings'] = $ratings;
}

/**
 * Implements hook_preprocess_THEME().
 */
function ding_voxb_preprocess_voxb_tags(&$variables) {
  $voxb_item = $variables['voxb_item'];
  $oid = $variables['object_id'];
  $profile = unserialize($_SESSION['voxb']['profile']);

  // Tags section
  $tags = '';
  foreach ($voxb_item->getTags() as $v) {
    $tags .= theme('voxb_tag_record', array('tag_name' => $v->getName()));
  }

  // Tags form section
  $tags_form = '';
  if (($profile && $profile->isAbleToTag($oid))) {
    $tags_form = drupal_render(drupal_get_form('ding_voxb_tag_form', $oid));
  }

  $variables['tags'] = $tags;
  $variables['tags_form'] = $tags_form;
}

/**
 * Implements hook_preprocess_THEME().
 */
function ding_voxb_preprocess_voxb_review(&$variables) {
  $voxb_item = $variables['voxb_item'];
  $oid = $variables['object_id'];
  $profile = unserialize($_SESSION['voxb']['profile']);

  // Reviews section
  $reviews = '';
  $limit = variable_get('voxb_reviews_per_page', VOXB_DEFAULT_REVIEWS_PER_PAGE);

  foreach ($voxb_item->getReviews('review') as $k => $v) {
    if ($k >= $limit) {
      break;
    }
    $reviews .= theme('voxb_review_record',
      array('author' => $v->getAuthorName(), 'review' => $v->getText())
    );
  }

  // Pagination section
  $pagination = '';
  $review_count = $voxb_item->getReviews('review')->getCount();
  $pages = -1;

  $pagination .= '<div id="pager-block" ' . (($review_count <= $limit) ? 'style="display: none;"' : '') . '>';
  $pagination .= '<ul>';
  // Hidden tab to keep track of first page
  $pagination .= '<li class="page-first" style="display: none;">' . l('', 'voxb/ajax/reviews/' . $oid . '/page/1', array('attributes' => array('class' => array('use-ajax')))) . '</li>';
  $pagination .= '<li class="prev-page">' . l('<<', 'voxb/ajax/reviews/' . $oid . '/page/1', array('attributes' => array('class' => array('use-ajax')))) . '</li>';

  $pages = ceil($review_count / variable_get('voxb_reviews_per_page', VOXB_DEFAULT_REVIEWS_PER_PAGE));

  // Draw 5 tabs/buttons/links
  for ($i = 0; $i < 5; $i++) {
    $pagination .= '<li class="page-num';
    // Highlight the middle one
    if ($i == 2) {
      $pagination .= ' active-page">';
    }
    else {
      $pagination .= '">';
    }
    
    if ($i > 1 && $i < $pages + 2) {
      $pagination .= l(($i - 1), 'voxb/ajax/reviews/' . $oid . '/page/' . ($i - 1) . '', array('attributes' => array('class' => array('use-ajax'))));
    }
    else {
      $pagination .= '';
    }

    $pagination .= '</li>';
  }

  $pagination .= '<li class="next-page">' . l('>>', 'voxb/ajax/reviews/' . $oid . '/page/2', array('attributes' => array('class' => array('use-ajax')))) . '</li>';
  $pagination .= '</ul>';
  $pagination .= '</div>';
  $pagination .= '<div class="clearfix"></div><br />';

  // Add review form section
  $review_form = '';
  $params = array();
  if ($profile) {
    // Form params, specific if user reviewed already or not
    $data = $profile->getVoxbUserData($oid);

    if ($data['review']['title'] != 'videoreview') {
      if ($data['review']['title'] == 'review') {
        $params = array(
          'faust_number' => $oid,
          'review_content' => $data['review']['data'],
          'action' => 'update',
        );
      }
      else {
        $params = array(
          'faust_number' => $oid,
          'review_content' => '',
          'action' => 'submit',
        );
      }

      $review_form .= drupal_render(drupal_get_form('ding_voxb_review_form', $params));
    }
  }

  // Add stuff to template
  $variables['reviews'] = $reviews;
  $variables['pagination'] = $pagination;
  $variables['review_form'] = $review_form;
}

/**
 * Build the text review form
 *
 * @param $form
 *   The form and it's fields
 * @param $form_state
 *   Form state
 * @param $faustNumber
 *   Item's faust number, e.g. ID
 * @return
 *   Form structure
 */
function ding_voxb_review_form($form, &$form_state, $params) {
  $form['review_content'] = array(
    '#type' => 'textarea',
    '#default_value' => ($params['action'] == 'update') ? $params['review_content'] : '',
  );

  $form['faust_number'] = array(
    '#type' => 'hidden',
    '#value' => $params['faust_number'],
  );

  $form['review_submit'] = array(
    '#type' => 'submit',
    '#value' => ($params['action'] == 'submit') ? 'Review' : 'Update',
    '#ajax' => array(
      'callback' => 'ding_voxb_review_form_callback',
    ),
  );

  return $form;
}

/**
 * Callback function for text review
 *
 * @param $form
 *   The form and it's fields
 * @param $form_state
 *   Form state
 * @return
 *   Array of json commands
 */
function ding_voxb_review_form_callback($form, &$form_state) {
  $commands = array();

  /**
   * Check if we have review message and faustNumber
   */
  if (empty($form['review_content']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_review_error', t('Error'), t('Please fill in your review message.'));
  }
  elseif (empty($form['faust_number']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_review_error', t('Error'), t('Wrong or empty faust number.'));
  }
  else {
    // add review to voxb
    $review = new VoxbReviewRecord();

    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$review->create($form['faust_number']['#value'], $form['review_content']['#value'], $profile)) {
      // add ding_popup command with notice message
      $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      // add commands to hide review container and show 'thank' message
      $commands[] = ajax_command_html('.user-reviews', '');
      $commands[] = ajax_command_invoke('#edit-review-submit', 'val', array('Update'));
      $commands[] = ajax_command_invoke('.add-video-review-container', 'hide', array());

      // Get reviews updated list

      $item = new VoxbItem();
      $item->addReviewHandler('review', new VoxbReviews());
      $item->fetchByFaust($form['faust_number']['#value']);
      $reviews = $item->getReviews('review');
      $reviews_count = $reviews->getCount();

      // Limit the count of displayed text reviews
      $limit = variable_get('voxb_reviews_per_page', VOXB_DEFAULT_REVIEWS_PER_PAGE);

      // Loop through reviews and display them
      foreach ($reviews as $k => $review) {
        if ($k >= $limit) {
          break;
        }

        $commands[] = ajax_command_prepend('.user-reviews', theme(
          'voxb_review_record',
          array(
            'author' => $review->getAuthorName(),
            'review' => $review->getText())
          )
        );
      }

      if ($reviews_count > $limit) {
        $commands[] = ajax_command_invoke('#pager-block', 'show');
      }
      // Jump to the first page
      if ($reviews_count > $limit) {
        $commands[] = ajax_command_invoke('.page-first a', 'click');
      }
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Create form for adding tags.
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $faust_number
 *   Item ID
 */
function ding_voxb_tag_form($form, $form_state, $faust_number) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#name' => 'name',
    '#ajax' => array(
      'event' => 'submit',
      'keypress' => TRUE,
      'callback' => 'ding_voxb_add_tag_callback'
    )
  );

  $form['faustNumber'] = array(
    '#type' => 'hidden',
    '#name' => 'faustNumber',
    '#value' => $faust_number
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'ding_voxb_add_tag_callback'
    ),
    '#attributes' => array('class' => array('rounded-corners')),
  );

  return $form;
}

/**
 * Callback method to handle add tag calls.
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @return
 *   Array of JSON commands
 */
function ding_voxb_add_tag_callback($form, &$form_state) {
  $commands = array();

  if (empty($form['name']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_tag_error', t('Error'), t('Please fill in your tag.'));
  }
  else {
    $tag = new VoxbTagRecord();
    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$tag->create($form['faustNumber']['#value'], $form['name']['#value'], $profile)) {
      // add popup notice
      $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      // hide form and show new tag
      $commands[] = ajax_command_append('div.record-tag-highlight', theme('voxb_tag_record', array('tag_name' => $form['name']['#value'])));
      $commands[] = array(
        'command' => 'voxb_tag_callback',
      );
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Callback function for item rating.
 *
 * @param $type
 *   Type of request
 * @param $faust_number
 *   Item ID
 * @param $rating
 *   Item rating
 */
function ding_voxb_rating($type = 'ajax', $faust_number = NULL, $rating = 0) {
   // We check if it's an ajax call
   // this can be used if we will ipmlement NO-JS functionality in FE.
  if ($type == 'ajax') {
    $commands = array();
    $rating = intval($rating);

    if ($rating == 0) {
      $commands[] = ajax_command_ding_popup('add_rate_error', t('Error'), t('Nothing selected.'));
    }
    elseif (empty($faust_number)) {
      $commands[] = ajax_command_ding_popup('add_rate_error', t('Error'), t('Wrong or empty faust number.'));
    }
    else {
      $item = new VoxbItem();

      $profile = unserialize($_SESSION['voxb']['profile']);
      $record_id = $profile->getVoxbUserData($faust_number);
      $r = NULL;

      if ($record_id == NULL) {
        $r = $item->rateItem($faust_number, $rating * 20, $_SESSION['voxb']['userId']);
      }
      else {
        $r = $item->updateRateItem($record_id['voxbIdentifier'], $rating * 20);
        // update profile object in session
      }
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      if ($r) {
        // Rating is successfully submited
        // Now we need to fetch new rating form Voxb
        $item->fetchByFaust($faust_number);

        $commands[] = array(
          'command' => 'voxb_rating_callback',
          'rating' => intval($item->getRating() / 20),
          'rating_count' => $item->getRatingCount()
        );
      }
      else {
        $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
      }
    }

    $commands[] = ajax_command_invoke('.ratings-container .ajax-anim', 'hide', array());

    $result = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($result);
  }
}

/**
 * Implements hook_ding_devel_timers().
 */
function ding_voxb_ding_devel_timers() {
  return array(
    'voxb' => array(
      'title' => 'VoxB total request time was @time ms.',
    )
  );
}

/**
 * Request rating and review count for multiple items
 *
 * @param $items
 *   Array of faust numbers
 * @return
 *   JSON encoded response
 *   In format item:faust, rating:count, reviews:count
 */
function ding_voxb_details() {
  $request = $_REQUEST['items'];
  $response = array();
  $response['status'] = FALSE;

  $items = new VoxbItems();
  $r = $items->fetchByFaust($request);

  if ($r) {
    $response['status'] = TRUE;
    for ($i = 0; $i < $items->getCount(); $i++) {
      $item = $items->getItem($request[$i]);

      if ($item) {
        $response['items'][(string)$request[$i]] = array(
          'rating' => $item->getRating(),
          'rating_count' => $item->getRatingCount(),
          'reviews' => $item->getReviews('review')->getCount(),
        );
      }
    }
  }

  drupal_json_output($response);
}

/**
 * Implements hook_field_info().
 */
function ding_voxb_field_info() {
  $fields = array();

  $fields['voxb_rating'] = array(
    'label' => t('Voxb rating'),
    'description' => t('Voxb rating'),
    'default_widget' => 'hidden',
    'default_formatter' => 'voxb_rating_default',
    'no_ui' => TRUE,
  );

  $fields['voxb_tags'] = array(
    'label' => t('Voxb tags'),
    'description' => t('Voxb tags'),
    'default_widget' => 'hidden',
    'default_formatter' => 'voxb_tags_default',
    'no_ui' => TRUE,
  );

  $fields['voxb_review'] = array(
    'label' => t('Voxb review'),
    'description' => t('Voxb review'),
    'default_widget' => 'hidden',
    'default_formatter' => 'voxb_review_default',
    'no_ui' => TRUE,
  );

  return $fields;
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_voxb_field_formatter_info() {
  $format = array();

  $format['voxb_rating_default'] = array(
    'label' => t('Default'),
    'field types' => array('voxb_rating'),
    'settings' => array('link_type' => 'none'),
  );

  $format['voxb_rating_display_only'] = array(
    'label' => t('Display only'),
    'field types' => array('voxb_rating'),
    'settings' => array('link_type' => 'none'),
  );

  $format['voxb_tags_default'] = array(
    'label' => t('Default'),
    'field types' => array('voxb_tags'),
    'settings' => array('link_type' => 'none'),
  );

  $format['voxb_review_default'] = array(
    'label' => t('Default'),
    'field types' => array('voxb_review'),
    'settings' => array('link_type' => 'none'),
  );

  $format['voxb_review_count_only'] = array(
    'label' => t('Count only'),
    'field types' => array('voxb_review'),
    'settings' => array('link_type' => 'none'),
  );

  return $format;
}

/**
 * Implements hook_field_load().
 */
function ding_voxb_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'voxb_rating' || $field['type'] == 'voxb_tags' || $field['type'] == 'voxb_review') {
    foreach ($entities as $id => $entity) {
      $items[$id][0] = array(
        'id' => $entity->id,
      );
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_voxb_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  
  drupal_add_css(VOXB_PATH . '/css/voxb.css');

  if ($display['type'] == 'voxb_rating_default' || $display['type'] == 'voxb_tags_default' || $display['type'] == 'voxb_review_default') {
    drupal_add_js(VOXB_PATH . '/js/voxb.item.js');
  }

  if ($display['type'] == 'voxb_rating_default' || $display['type'] == 'voxb_tags_default') {
    drupal_add_js(VOXB_PATH . '/js/cyclic.fade.js');
  }

  if ($display['type'] == 'voxb_review_default') {
    drupal_add_css(VOXB_PATH . '/css/voxb-pager.css');
  }

  if ($display['type'] == 'voxb_rating_display_only' || $display['type'] == 'voxb_review_count_only') {
    drupal_add_js(VOXB_PATH . '/js/voxb.details.js', 'file');
  }

  // Fetch data from VoxB service
  $voxb_item = new VoxbItem();
  $voxb_item->addReviewHandler('review', new VoxbReviews());
  $voxb_item->fetchByFaust($entity->localId);
  $profile = unserialize($_SESSION['voxb']['profile']);

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'voxb_rating_default':
        $element[$delta] = array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => theme('voxb_rating', array(
            'voxb_item' => $voxb_item,
            'object_id' => $entity->localId)),
        );
        break;

      case 'voxb_rating_display_only':
        $element[$delta] = array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => theme('voxb_rating_display_only', array(
            'object_id' => $entity->id,
            'object_local_id' => $entity->localId))
          );
        break;
      
      case 'voxb_tags_default':
        $element[$delta] = array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => theme('voxb_tags', array(
            'voxb_item' => $voxb_item,
            'object_id' => $entity->localId)),
        );
        break;

      case 'voxb_review_default':
        $element[$delta] = array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => theme('voxb_review', array(
            'voxb_item' => $voxb_item,
            'object_id' => $entity->localId)),
        );
        break;

      case 'voxb_review_count_only':
        $element[$delta] = array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => theme('voxb_review_count', array(
            'object_id' => $entity->id,
            'object_local_id' => $entity->localId)),
        );
        break;
    }
  }

  return $element;
}
