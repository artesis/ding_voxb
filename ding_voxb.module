<?php

// Define reviews per page
define('VOXB_REVIEWS_PER_PAGE', 3);
// Define path to Voxb module
define('VOXB_PATH', drupal_get_path('module', 'ding_voxb'));

/**
 * @file
 *
 * hook_init
 * Adding JS code to the page for ajax login form.
 */
function ding_voxb_init() {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  drupal_add_css(VOXB_PATH . '/css/voxb-pager.css', array('type' => 'file'));
  drupal_add_css(VOXB_PATH . '/css/voxb.css', array('type' => 'file'));
  drupal_add_js(VOXB_PATH . '/js/cyclic.fade.js');
  drupal_add_js(VOXB_PATH . '/js/voxb.item.js');
}

/**
 * Implements hook_menu().
 */
function ding_voxb_menu() {
  $items = array();

  $items['admin/config/ding/voxb'] = array(
    'title' => 'VoxB',
    'description' => 'VoxB module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_voxb_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'ding_voxb.admin.inc'
  );

  $items['voxb/ajax/reviews/%/page/%'] = array(
    'title' => 'VoxB pagination handler',
    'description' => '',
    'page arguments' => array(1, 3, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_paginator',
  );

  $items['voxb/ajax/rating/%/%'] = array(
    'title' => 'VoxB rating handler',
    'description' => '',
    'page arguments' => array(1, 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'ding_voxb_rating',

  );

  return $items;
}

/**
 * Hook user_login.
 * Invokes methos to select user information from Voxb
 * @param $edit
 * @param $account
 */
function ding_voxb_user_login($edit, $account) {
  require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbLogin.class.php';
  $obj = new VoxbLogin();
  $obj->login($account);
}

/**
 * Handle the pagination page click, update reviews & pagination labels
 *
 * @param string $type - Type of the request, e.g. ajax or else
 * @param string $faust_number - Item ID
 * @param int $page - Clicked page number
 */
function ding_voxb_paginator($type = 'ajax', $faust_number = '', $page = 1) {
  // In case we have an ajax call
  if ($type == 'ajax') {
    if ($faust_number != '') {
      // Calculate the reviews array fetch limits
      $per_page = variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE);
      $start = ($page - 1) * $per_page;
      $end = $start + $per_page;

      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbItem.class.php';
      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbReviews.class.php';

      // Get the reviews
      $item = new VoxbItem();
      $item->addReviewHandler('review', new VoxbReviews());
      $item->fetchByFaust($faust_number);
      $reviews = $item->getReviews('review')->toArray();

      // Remove the reviews
      $commands[] = ajax_command_html('.user-reviews', '');

      // Place the reviews
      for ($i = $start; $i < $end; $i++) {
        $commands[] = ajax_command_append('.user-reviews', theme(
          'voxb_review_record',
          array(
            'author' => $reviews[$i]['authorName'],
            'review' => $reviews[$i]['text'])));
      }

      $page_to_set = 1;
      // Update the pagination 'previous' link
      if ($page > 1) {
        $page_to_set = $page - 1;
      }

      $commands[] = ajax_command_html(
        '.prev-page',
        l(
          '<<',
          'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_to_set . '',
          array('attributes' => array('class' => array('use-ajax')))));

      $pages_total = ceil(count($reviews) / $per_page);
      $page_to_set = $pages_total;

      // Update the pagination 'next' link
      if ($page < $pages_total) {
        $page_to_set = $page + 1;
      }

      $commands[] = ajax_command_html(
        '.next-page',
        l(
          '>>',
          'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_to_set . '',
          array('attributes' => array('class' => array('use-ajax')))));

      // Update the pagination 'numbered' links
      for ($i = $page - 1, $k = 0; $k < 5; $i++, $k++) {
        $page_link = $i - 1;

        // Check the link index bounds, recreate if true, remove if otherwise
        if ($page_link > 0 && $page_link <= $pages_total) {
          $commands[] = ajax_command_html(
            '.page-num:eq(' . $k . ')',
            l(
              $page_link,
              'voxb/ajax/reviews/' . $faust_number . '/page/' . $page_link . '',
              array('attributes' => array('class' => array('use-ajax')))));
        }
        else {
          $commands[] = ajax_command_html('.page-num:eq(' . $k . ')', l('', '', array()));
        }
      }

      $result = array('#type' => 'ajax', '#commands' => $commands);

      // Show the changes
      ajax_deliver($result);
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function ding_voxb_theme() {
  $hooks['voxb_tag_record'] = array(
    'variables' => array('tag_name' => NULL),
    'template' => 'ding_voxb-tag-record'
  );

  $hooks['voxb_review_record'] = array(
    'variables' => array('author' => NULL, 'review' => NULL),
    'template' => 'ding_voxb-review-record',
  );

  return $hooks;
}

/**
 * Build the text review form
 *
 * @param array $form - The form and it's fields
 * @param reference $form_state - Form state
 * @param string $faustNumber - Item's faust number, e.g. ID
 * @return array
 */
function ding_voxb_review_form($form, &$form_state, $params) {
  $form['review_content'] = array(
    '#type' => 'textarea',
    '#default_value' => ($params['action'] == 'update') ? $params['review_content'] : '',
  );

  $form['faust_number'] = array(
    '#type' => 'hidden',
    '#value' => $params['faust_number'],
  );

  $form['review_submit'] = array(
    '#type' => 'submit',
    '#value' => ($params['action'] == 'submit') ? 'Review' : 'Update',
    '#ajax' => array(
      'callback' => 'ding_voxb_review_form_callback',
    ),
  );

  return $form;
}

/**
 *
 * @param array $form - The form and it's fields
 * @param reference $form_state - Form state
 * @return array - Array of json commands
 */
function ding_voxb_review_form_callback($form, $form_state) {
  $commands = array();

  /*
   * Check if we have review message and faustNumber
   */
  if (empty($form['review_content']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_review_error', t('Error'), t('Please fill in your review message.'));
  }
  elseif (empty($form['faust_number']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_review_error', t('Error'), t('Wrong or empty faust number.'));
  }
  else {
    require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbBase.class.php';
    require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbReviewRecord.class.php';

    // add review to to voxb
    $review = new VoxbReviewRecord();

    require_once(VOXB_PATH . '/lib/VoxbProfile.class.php');
    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$review->create($form['faust_number']['#value'], $form['review_content']['#value'], $profile)) {
      // add ding_popup command with notice message
      $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      // add commands to hide review container and show 'thank' message
      //$commands[] = ajax_command_invoke('.add-review-container', 'hide', array());
      $commands[] = ajax_command_html('.userReviews', '');
      $commands[] = ajax_command_invoke('#edit-review-submit', 'val', array('Update'));
      $commands[] = ajax_command_invoke('.addVideoReviewContainer', 'hide', array());

      // Get reviews updated list
      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbItem.class.php';
      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbReviews.class.php';

      $item = new VoxbItem();
      $item->addReviewHandler('review', new VoxbReviews());
      $item->fetchByFaust($form['faust_number']['#value']);
      $reviews = $item->getReviews('review');
      $reviews_count = $reviews->getCount();

      // Limit the count of displayed text reviews
      $limit = variable_get('voxb_reviews_per_page', VOXB_REVIEWS_PER_PAGE);

      // Loop through reviews and display them
      foreach ($reviews as $k => $review) {
        if ($k >= $limit) {
          break;
        }

        $commands[] = ajax_command_prepend('.userReviews', theme(
          'voxb_review_record',
          array(
            'author' => $review->getAuthorName(),
            'review' => $review->getText())
          )
        );
      }

      if ($reviews_count > $limit) {
        $commands[] = ajax_command_invoke('#pager_block', 'show');
      }
      // Jump to the first page
      if ($reviews_count > $limit) {
        $commands[] = ajax_command_invoke('.page_first a', 'click');
      }
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Create form for adding tags
 * @param $form
 * @param $form_state
 * @param $faust_number
 */
function ding_voxb_tag_form($form, $form_state, $faust_number) {

  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#name' => 'name',
    '#ajax' => array(
      'event' => 'submit',
      'keypress' => TRUE,
      'callback' => 'ding_voxb_add_tag_callback'
    )
  );

  $form['faustNumber'] = array(
    '#type' => 'hidden',
    '#name' => 'faustNumber',
    '#value' => $faust_number
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'ding_voxb_add_tag_callback'
    ),
  );

  return $form;
}

/**
 * Callback method to handle add tag calls
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function ding_voxb_add_tag_callback($form, $form_state) {
  $commands = array();

  if (empty($form['name']['#value'])) {
    $commands[] = ajax_command_ding_popup('add_tag_error', t('Error'), t('Please fill in your tag.'));
  }
  else {
    require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbItem.class.php';
    require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbProfile.class.php';
    $tag = new VoxbTagRecord();
    $profile = unserialize($_SESSION['voxb']['profile']);

    if (!$tag->create($form['faustNumber']['#value'], $form['name']['#value'], $profile)) {
      // add popup notice
      $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
    }
    else {
      // update profile object in session
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      // hide form and show new tag
      $commands[] = ajax_command_append('div.record-tag-highlight', theme('voxb_tag_record', array('tag_name' => $form['name']['#value'])));
      $commands[] = ajax_command_replace("#ding_voxb_tag_form", t('Thank you for contributing.'));
      $commands[] = array(
        'command' => 'voxb_tag_callback',
      );
    }
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ding_voxb_rating($type = 'ajax', $faust_number = NULL, $rating = 0) {
  /**
   * we check if it's an ajax call
   * this can be used if we will ipmlement NO-JS functionality in FE
   */
  if ($type == 'ajax') {
    $commands = array();
    $rating = intval($rating);

    if ($rating == 0) {
      $commands[] = ajax_command_ding_popup('add_rate_error', t('Error'), t('Nothing selected.'));
    }
    elseif (empty($faust_number)) {
      $commands[] = ajax_command_ding_popup('add_rate_error', t('Error'), t('Wrong or empty faust number.'));
    }
    else {
      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbItem.class.php';
      require_once DRUPAL_ROOT . '/' . VOXB_PATH . '/lib/VoxbProfile.class.php';

      $item = new VoxbItem();

      $profile = unserialize($_SESSION['voxb']['profile']);
      $record_id = $profile->getVoxbUserData($faust_number);
      $r = NULL;

      if ($record_id == NULL) {
        $r = $item->rateItem($faust_number, $rating * 20, $_SESSION['voxb']['userId']);
      }
      else {
        $r = $item->updateRateItem($record_id['voxbIdentifier'], $rating * 20);
        // update profile object in session
      }
      $profile->updateActedItems();
      $_SESSION['voxb']['profile'] = serialize($profile);

      if ($r) {
        // Rating is successfully submited
        // Now we need to fetch new rating form Voxb
        $item->fetchByFaust($faust_number);
        $commands[] = array(
          'command' => 'voxb_rating_callback',
          'rating' => intval($item->getRating() / 20),
          'rating_count' => $item->getRatingCount()
        );
      }
      else {
        $commands[] = ajax_command_ding_popup('voxb_error', t('Error'), t('Service temporary unavailable.'));
      }
    }

    $commands[] = ajax_command_invoke('.ratings-container .ajax-anim', 'hide', array());

    $result = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($result);
  }
}
